{
  "openapi": "3.0.0",
  "info": {
    "title": "Corti Copilot API",
    "version": "2.0.0"
  },
  "servers": [
    {
      "url": "https://copilot.{region}.corti.app/",
      "variables": {
        "region": {
          "default": "us",
          "enum": [
            "us",
            "eu"
          ]
        }
      }
    }
  ],
  "paths": {
    "/v2/interactions/": {
      "get": {
        "responses": {
          "200": {
            "description": " ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseInteractions"
                }
              }
            }
          }
        },
        "tags": [
          "interactions"
        ],
        "summary": "List all interactions",
        "description": " Lists all existing interactions.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": " ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "description": " "
            }
          },
          {
            "name": "index",
            "in": "query",
            "description": " ",
            "schema": {
              "type": "integer",
              "format": "int64",
              "description": " "
            }
          },
          {
            "name": "encounterStatus",
            "in": "query",
            "description": "The status of the encounter. To fetch for multiple status pass the same parameter again.",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The status of the encounter. To fetch for multiple status pass the same parameter again."
            }
          },
          {
            "name": "patientId",
            "in": "query",
            "description": "A unique identifier for the patient.",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "A unique identifier for the patient."
            }
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": " ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseInteractionCreate"
                }
              }
            }
          }
        },
        "tags": [
          "interactions"
        ],
        "summary": "Create interaction",
        "description": " Creates a new interaction.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestInteractionCreate"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v2/interactions/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": " ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseInteraction"
                }
              }
            }
          }
        },
        "tags": [
          "interactions"
        ],
        "summary": "Get existing interaction",
        "description": " Gets an existing interaction.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The interaction ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The interaction ID representing the context for the request."
            }
          }
        ]
      },
      "patch": {
        "responses": {
          "200": {
            "description": " ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseInteraction"
                }
              }
            }
          }
        },
        "tags": [
          "interactions"
        ],
        "summary": "Update interaction",
        "description": " Patches an existing interaction.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The interaction ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The interaction ID representing the context for the request."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestInteractionUpdate"
              }
            }
          },
          "required": true
        }
      },
      "delete": {
        "responses": {
          "204": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoContent"
                }
              }
            }
          }
        },
        "tags": [
          "interactions"
        ],
        "summary": "Delete interaction",
        "description": " Deletes an existing interaction.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The interaction ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The interaction ID representing the context for the request."
            }
          }
        ]
      }
    },
    "/v2/interactions/{id}/stream": {
      "get": {
        "responses": {
          "101": {
            "description": "Protocol switching",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestInteractionStreamConfig",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ResponseInteractionStreamTranscript"
                    },
                    {
                      "$ref": "#/components/schemas/ResponseInteractionStreamFact"
                    },
                    {
                      "$ref": "#/components/schemas/ResponseInteractionStreamTopic"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "stream"
        ],
        "summary": "Stream interaction",
        "description": " Extablish WSS connection. See placeholder `TRACE` method for client/server messages in the socket.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The interaction ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The interaction ID representing the context for the request."
            }
          }
        ],
        "servers": [
          {
            "url": "wss://copilot.{region}.corti.app/",
            "variables": {
              "region": {
                "default": "us",
                "enum": [
                  "us",
                  "eu"
                ]
              }
            }
          }
        ]
      },
      "trace": {
        "summary": "WSS client/server messages.",
        "description": "Due to OpenAPI limitation this is a dummy placeholder for the client/server messages in WSS stream.",
        "tags": [
          "stream"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RequestInteractionStreamConfig"
                  },
                  {
                    "$ref": "#/components/schemas/RequestInteractionStreamStatus"
                  },
                  {
                    "type": "string",
                    "format": "binary",
                    "description": "arraybuffer",
                    "title": "Audio"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "101": {
            "description": "Protocol switching",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ResponseInteractionStreamTranscript"
                    },
                    {
                      "$ref": "#/components/schemas/ResponseInteractionStreamFact"
                    },
                    {
                      "$ref": "#/components/schemas/ResponseInteractionStreamTopic"
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "UUID of the interaction",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "UUID of the interaction"
            }
          }
        ]
      }
    },
    "/v2/interactions/{id}/facts": {
      "get": {
        "responses": {
          "200": {
            "description": " ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFactsList"
                }
              }
            }
          }
        },
        "tags": [
          "facts"
        ],
        "summary": "List Facts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The interaction ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The interaction ID representing the context for the request."
            }
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": " ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFactsCreate"
                }
              }
            }
          }
        },
        "tags": [
          "facts"
        ],
        "summary": "Create Facts",
        "description": " When creating a Fact if the interaction status = \u201cin progress\u201d then the Client will receive the newly created fact over the WebSocket.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The interaction ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The interaction ID representing the context for the request."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestFactsCreate"
              }
            }
          },
          "required": true
        }
      },
      "put": {
        "responses": {
          "200": {
            "description": " ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFactsList"
                }
              }
            }
          }
        },
        "tags": [
          "facts"
        ],
        "summary": "Generate Facts",
        "description": " Generate facts from provided transcript, replacing existing ones.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The interaction ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The interaction ID representing the context for the request."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestFactGenerate"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v2/interactions/{id}/facts/{factId}": {
      "patch": {
        "responses": {
          "200": {
            "description": " ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFactCreate"
                }
              }
            }
          }
        },
        "tags": [
          "facts"
        ],
        "summary": "Update Fact",
        "description": " When updating a `Fact` if the interaction `status = \u201cin progress\u201d` then the Client will receive the updated fact over the WebSocket. To discard a fact, simply set `discarded = true`",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The interaction ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The interaction ID representing the context for the request."
            }
          },
          {
            "name": "factId",
            "in": "path",
            "description": "The fact ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The fact ID representing the context for the request."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestFactUpdate"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v2/interactions/{id}/documents": {
      "get": {
        "responses": {
          "200": {
            "description": " ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDocumentList"
                }
              }
            }
          }
        },
        "tags": [
          "documents"
        ],
        "summary": "List documents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The interaction ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The interaction ID representing the context for the request."
            }
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": " ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDocumentCreate"
                }
              }
            }
          }
        },
        "tags": [
          "documents"
        ],
        "summary": "Create document",
        "description": " Generate document.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The interaction ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The interaction ID representing the context for the request."
            }
          },
          {
            "name": "stream",
            "in": "query",
            "description": "If true the response happens via SSE sending back a full valid JSON always, however, the content within text may be incomplete.",
            "example": "false",
            "schema": {
              "type": "boolean",
              "format": "boolean",
              "description": "If true the response happens via SSE sending back a full valid JSON always, however, the content within text may be incomplete."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestDocumentCreate"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v2/interactions/{id}/documents/{documentId}": {
      "get": {
        "responses": {
          "200": {
            "description": " ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDocumentRead"
                }
              }
            }
          }
        },
        "tags": [
          "documents"
        ],
        "summary": "Get Document",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The interaction ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The interaction ID representing the context for the request."
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "The document ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The document ID representing the context for the request."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "If true the response contains the context used to generated the document, such as fact, transcript or string.",
            "example": "false",
            "schema": {
              "type": "boolean",
              "format": "boolean",
              "description": "If true the response contains the context used to generated the document, such as fact, transcript or string."
            }
          }
        ]
      },
      "patch": {
        "responses": {
          "200": {
            "description": " ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDocumentRead"
                }
              }
            }
          }
        },
        "tags": [
          "documents"
        ],
        "summary": "Update Document",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The interaction ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The interaction ID representing the context for the request."
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "The document ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The document ID representing the context for the request."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestDocumentUpdate"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v2/interactions/{id}/codes": {
      "get": {
        "responses": {
          "200": {
            "description": " ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCodesList"
                }
              }
            }
          }
        },
        "tags": [
          "codes"
        ],
        "summary": "List Codes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The interaction ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The interaction ID representing the context for the request."
            }
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": " ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCodesList"
                }
              }
            }
          }
        },
        "tags": [
          "codes"
        ],
        "summary": "Predict codes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The interaction ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The interaction ID representing the context for the request."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestCodesCreate"
              }
            }
          },
          "required": true
        }
      },
      "patch": {
        "responses": {
          "200": {
            "description": " ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCodesList"
                }
              }
            }
          }
        },
        "tags": [
          "codes"
        ],
        "summary": "Select Codes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The interaction ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The interaction ID representing the context for the request."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestCodesUpdate"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v2/interactions/{id}/recordings": {
      "get": {
        "responses": {
          "200": {
            "description": " ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseRecordingList"
                }
              }
            }
          }
        },
        "tags": [
          "recordings"
        ],
        "summary": "List Recordings",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The interaction ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The interaction ID representing the context for the request."
            }
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": " ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseRecordingCreate"
                }
              }
            }
          }
        },
        "tags": [
          "recordings"
        ],
        "summary": "Upload recording",
        "description": " Accept only audio of max 60 minutes in length and 150MB in size.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The interaction ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The interaction ID representing the context for the request."
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Recording": {
                    "type": "string",
                    "format": "binary",
                    "description": "binary"
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/v2/interactions/{id}/recordings/{recordingId}": {
      "get": {
        "responses": {
          "200": {
            "description": "binary",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "recordings"
        ],
        "summary": "Get Recording",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The interaction ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The interaction ID representing the context for the request."
            }
          },
          {
            "name": "recordingId",
            "in": "path",
            "description": "The recording ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The recording ID representing the context for the request."
            }
          }
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoContent"
                }
              }
            }
          }
        },
        "tags": [
          "recordings"
        ],
        "summary": "Delete Recording",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The interaction ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The interaction ID representing the context for the request."
            }
          },
          {
            "name": "recordingId",
            "in": "path",
            "description": "The recording ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The recording ID representing the context for the request."
            }
          }
        ]
      }
    },
    "/v2/interactions/{id}/transcripts": {
      "post": {
        "responses": {
          "200": {
            "description": " ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseTranscriptCreate"
                }
              }
            }
          }
        },
        "tags": [
          "transcripts"
        ],
        "summary": "Transcribe audio",
        "description": " Time-out for this endpoint is 10 minutes.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The interaction ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The interaction ID representing the context for the request."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestTranscriptCreate"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v2/interactions/{id}/transcripts/{transcriptId}": {
      "get": {
        "responses": {
          "200": {
            "description": " ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseTranscriptCreate"
                }
              }
            }
          }
        },
        "tags": [
          "transcripts"
        ],
        "summary": "Get Transcript",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The interaction ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The interaction ID representing the context for the request."
            }
          },
          {
            "name": "transcriptId",
            "in": "path",
            "description": "The transcript ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The transcript ID representing the context for the request."
            }
          }
        ]
      }
    },
    "/private/v2/align": {
      "post": {
        "responses": {
          "200": {
            "description": "Alignment results with percentage and optionally aligned segments.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseAlign"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or missing required parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoContent"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication failed or user is not authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoContent"
                }
              }
            }
          }
        },
        "tags": [
          "experimental"
        ],
        "summary": "Align Sections",
        "description": " Compares a 'source' document with a 'target' document and returns a percentage alignment, optionally including aligned segments.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestAlign"
              }
            }
          },
          "required": true
        }
      }
    },
    "/private/v2/interactions/{id}/classification/binary/": {
      "post": {
        "responses": {
          "200": {
            "description": " ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseClassificationCreate"
                }
              }
            }
          }
        },
        "tags": [
          "experimental"
        ],
        "summary": "Create classification",
        "description": " This endpoint is used for binary classification tasks where a boolean output is expected.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The interaction ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The interaction ID representing the context for the request."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestClassificationCreate"
              }
            }
          },
          "required": true
        }
      }
    },
    "/private/v2/interactions/{id}/query": {
      "post": {
        "responses": {
          "200": {
            "description": "SSE streaming response with results from multiple tools. The initial response includes a thread ID for continuing the conversation. (`text/event-stream`)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseQuery"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was malformed or missing required parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoContent"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication failed or user is not authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoContent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoContent"
                }
              }
            }
          }
        },
        "tags": [
          "experimental"
        ],
        "summary": "Contextual Query Assistant",
        "description": " Allows users to ask questions or make queries, which are processed in the context of a specific interaction. Multiple tools provide responses via SSE. A thread ID is returned with the initial query, which can be used to continue posting to the same thread in subsequent queries.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The interaction ID representing the context for the request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The interaction ID representing the context for the request."
            }
          },
          {
            "name": "threadId",
            "in": "query",
            "description": "The thread ID representing the context for the request.",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "The thread ID representing the context for the request."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestQuery"
              }
            }
          },
          "required": true
        }
      }
    },
    "/private/v2/tools/guidelines": {
      "post": {
        "responses": {
          "200": {
            "description": "Returns a summary and a list of relevant sources.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseGuidelines"
                }
              }
            }
          }
        },
        "tags": [
          "experimental"
        ],
        "summary": "Guidelines Tool API",
        "description": " Processes a query and returns a summary along with relevant sources.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestGuidelines"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v2/tools/mentions": {
      "post": {
        "responses": {
          "200": {
            "description": "Returns an array of mentions found in the reference texts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseMention"
                }
              }
            }
          }
        },
        "tags": [
          "experimental"
        ],
        "summary": "Mentions Tool API",
        "description": " Finds mentions of a query within a set of reference texts.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestMention"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v2/tools/question-prompts": {
      "post": {
        "responses": {
          "200": {
            "description": "Returns an array of suggested questions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseQuestionPrompts"
                }
              }
            }
          }
        },
        "tags": [
          "experimental"
        ],
        "summary": "Question Prompts Tool API",
        "description": " Provides a list of suggested questions based on a query and/or context.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestQuestionPrompts"
              }
            }
          },
          "required": true
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AdditionalCode": {
        "type": "object",
        "properties": {
          "subsetName": {
            "type": "string",
            "example": "orsakskoder"
          },
          "code": {
            "type": "string",
            "example": "W0231"
          },
          "description": {
            "type": "string"
          },
          "state": {
            "type": "object",
            "$ref": "#/components/schemas/CodesState"
          }
        }
      },
      "AlignedSegment": {
        "type": "object",
        "properties": {
          "targetSegment": {
            "type": "object",
            "$ref": "#/components/schemas/TargetSegment"
          },
          "sourceReference": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "text": {
                  "type": "string",
                  "description": "The content of the matching segment in the source document."
                },
                "range": {
                  "type": "array",
                  "description": "Start and end indices of the segment in the source document.",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "alignmentPercentage": {
            "type": "number",
            "description": "Alignment percentage between the target and source segment."
          }
        }
      },
      "ClassificationResult": {
        "type": "object",
        "properties": {
          "prediction": {
            "type": "string"
          }
        }
      },
      "CodesContext": {
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/CodesContextTypeEnum"
          },
          "data": {
            "type": "string"
          }
        }
      },
      "CodesContextType": {
        "type": "string"
      },
      "CodesContextTypeEnum": {
        "type": "string",
        "enum": [
          "string",
          "documentId"
        ]
      },
      "CodesState": {
        "type": "object",
        "properties": {
          "isSelected": {
            "type": "boolean"
          },
          "source": {
            "$ref": "#/components/schemas/V2SourceEnum"
          }
        }
      },
      "DocumentContext": {
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "properties": {
          "type": {
            "description": "The type of context data.",
            "$ref": "#/components/schemas/V2DocumentContextEnum"
          },
          "data": {
            "type": "array",
            "description": "The actual data, which can be an array of Fact, a transcript, or a string.",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "DocumentSection": {
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/components/schemas/V2DocumentSectionKeyEnum"
          },
          "text": {
            "type": "string"
          }
        }
      },
      "DocumentTemplate": {
        "type": "object",
        "properties": {
          "sectionIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UUID"
            }
          },
          "outputLanguage": {
            "type": "string"
          },
          "documentName": {
            "type": "string"
          },
          "additionalInstructions": {
            "type": "string"
          }
        }
      },
      "Encounter": {
        "type": "object",
        "required": [
          "identifier",
          "status",
          "type",
          "period"
        ],
        "properties": {
          "identifier": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/V2EncounterStatusEnum"
          },
          "type": {
            "$ref": "#/components/schemas/V2EncounterTypeEnum"
          },
          "period": {
            "type": "object",
            "$ref": "#/components/schemas/EncounterPeriod"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "EncounterPeriod": {
        "type": "object",
        "required": [
          "startedAt"
        ],
        "properties": {
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "startedAtTzoffset": {
            "type": "string",
            "example": "+00:00"
          },
          "endedAt": {
            "type": "string",
            "format": "date-time"
          },
          "endedAtTzoffset": {
            "type": "string",
            "example": "+00:00"
          }
        }
      },
      "MentionData": {
        "type": "object",
        "properties": {
          "range": {
            "type": "array",
            "description": "Character range for document type.",
            "items": {
              "type": "integer"
            }
          },
          "time": {
            "type": "array",
            "description": "Time range in seconds for transcript type.",
            "items": {
              "type": "integer"
            }
          },
          "snippet": {
            "type": "string",
            "description": "Text snippet for the mention."
          },
          "documentId": {
            "type": "array",
            "description": "The document ID if applicable.",
            "items": {},
            "$ref": "#/components/schemas/UUID"
          },
          "utteranceId": {
            "type": "array",
            "description": "The utterance ID if applicable.",
            "items": {},
            "$ref": "#/components/schemas/UUID"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp for transcript mentions."
          }
        }
      },
      "NoContent": {
        "type": "object"
      },
      "Patient": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "identifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "gender": {
            "$ref": "#/components/schemas/V2GenderEnum"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time"
          },
          "pronouns": {
            "type": "string"
          }
        }
      },
      "QueryData": {
        "type": "object",
        "properties": {
          "summary": {
            "type": "string",
            "description": "For guidelines, a summary of the response."
          },
          "sources": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "favicon": {
                  "type": "string",
                  "description": "The favicon URL of the source."
                },
                "title": {
                  "type": "string",
                  "description": "The title of the source."
                },
                "url": {
                  "type": "string",
                  "description": "The URL of the source."
                },
                "type": {
                  "type": "string",
                  "description": "The type of the source (e.g., PDF, Web)."
                },
                "description": {
                  "type": "string",
                  "description": "A brief description of the source."
                }
              }
            }
          },
          "mentions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The type of mention (e.g., transcript, document)."
                },
                "data": {
                  "type": "object",
                  "$ref": "#/components/schemas/MentionData"
                }
              }
            }
          },
          "response": {
            "type": "string",
            "description": "General chat response in markdown format."
          },
          "rewrittenText": {
            "type": "string",
            "description": "For document rewrites, the rewritten text in markdown format."
          },
          "queries": {
            "type": "array",
            "description": "Related or follow-up queries.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "QueryMention": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of mention (e.g., transcript, document)."
          },
          "data": {
            "type": "object",
            "$ref": "#/components/schemas/MentionData"
          }
        }
      },
      "QuerySource": {
        "type": "object",
        "properties": {
          "favicon": {
            "type": "string",
            "description": "The favicon URL of the source."
          },
          "title": {
            "type": "string",
            "description": "The title of the source."
          },
          "url": {
            "type": "string",
            "description": "The URL of the source."
          },
          "type": {
            "type": "string",
            "description": "The type of the source (e.g., PDF, Web)."
          },
          "description": {
            "type": "string",
            "description": "A brief description of the source."
          }
        }
      },
      "RequestAlign": {
        "type": "object",
        "required": [
          "sourceDocument",
          "targetDocument"
        ],
        "properties": {
          "sourceDocument": {
            "type": "string",
            "description": "The content of the source document."
          },
          "targetDocument": {
            "type": "string",
            "description": "The content of the target document."
          },
          "compareSegments": {
            "type": "boolean",
            "description": "Indicates if segments from the source should be compared with the target.",
            "example": false
          }
        }
      },
      "RequestClassificationCreate": {
        "type": "object",
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "taskId": {
            "type": "array",
            "items": {},
            "$ref": "#/components/schemas/UUID"
          }
        }
      },
      "RequestCodeUpdate": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "W0231"
          },
          "additionalCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdditionalCode"
            }
          }
        }
      },
      "RequestCodesCreate": {
        "type": "object",
        "required": [
          "modelName",
          "context"
        ],
        "properties": {
          "modelName": {
            "type": "string",
            "example": "\"geography_modelName (Latest)\" | \"geography_modelName_version\""
          },
          "context": {
            "type": "object",
            "$ref": "#/components/schemas/CodesContext"
          },
          "existingCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RequestCodesUpdate": {
        "type": "object",
        "required": [
          "finalCodes"
        ],
        "properties": {
          "finalCodes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "example": "W0231"
                },
                "additionalCodes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdditionalCode"
                  }
                }
              }
            }
          }
        }
      },
      "RequestDocumentCreate": {
        "type": "object",
        "required": [
          "context",
          "templateId"
        ],
        "properties": {
          "context": {
            "type": "object",
            "$ref": "#/components/schemas/DocumentContext"
          },
          "templateId": {
            "type": "array",
            "items": {},
            "$ref": "#/components/schemas/UUID"
          },
          "template": {
            "type": "object",
            "$ref": "#/components/schemas/DocumentTemplate"
          },
          "name": {
            "type": "string"
          },
          "modelName": {
            "type": "string",
            "example": "\"model_name (Latest)\" | \"model_name_version\""
          }
        }
      },
      "RequestDocumentUpdate": {
        "type": "object",
        "properties": {
          "documentId": {
            "type": "array",
            "items": {},
            "$ref": "#/components/schemas/UUID"
          },
          "sections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentSection"
            }
          }
        }
      },
      "RequestEncounterPeriodUpdate": {
        "type": "object",
        "required": [
          "startedAt"
        ],
        "properties": {
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "startedAtTzoffset": {
            "type": "string",
            "example": "+00:00"
          },
          "endedAt": {
            "type": "string",
            "format": "date-time"
          },
          "endedAtTzoffset": {
            "type": "string",
            "example": "+00:00"
          }
        }
      },
      "RequestEncounterUpdate": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/V2EncounterStatusEnum"
          },
          "type": {
            "$ref": "#/components/schemas/V2EncounterTypeEnum"
          },
          "period": {
            "type": "object",
            "$ref": "#/components/schemas/RequestEncounterPeriodUpdate"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "RequestFactCreate": {
        "type": "object",
        "required": [
          "text",
          "source"
        ],
        "properties": {
          "text": {
            "type": "string"
          },
          "group": {
            "type": "string",
            "example": "Others"
          },
          "source": {
            "$ref": "#/components/schemas/V2SourceEnum"
          }
        }
      },
      "RequestFactGenerate": {
        "type": "object",
        "required": [
          "transcript"
        ],
        "properties": {
          "transcript": {
            "type": "object",
            "$ref": "#/components/schemas/Transcript"
          }
        }
      },
      "RequestFactUpdate": {
        "type": "object",
        "properties": {
          "isDiscarded": {
            "type": "boolean"
          },
          "text": {
            "type": "string"
          },
          "group": {
            "type": "string",
            "example": "Others"
          },
          "source": {
            "$ref": "#/components/schemas/V2SourceEnum"
          }
        }
      },
      "RequestFactsCreate": {
        "type": "object",
        "required": [
          "facts"
        ],
        "properties": {
          "facts": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "text",
                "source"
              ],
              "properties": {
                "text": {
                  "type": "string"
                },
                "group": {
                  "type": "string",
                  "example": "Others"
                },
                "source": {
                  "$ref": "#/components/schemas/V2SourceEnum"
                }
              }
            }
          }
        }
      },
      "RequestGuidelines": {
        "type": "object",
        "required": [
          "query",
          "context",
          "sourceIds"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "The text-based query from the user."
          },
          "context": {
            "type": "array",
            "description": "An array of contexts, such as documents or relevant segments.",
            "items": {
              "type": "string"
            }
          },
          "sourceIds": {
            "type": "array",
            "description": "An array of source IDs to narrow down the search.",
            "items": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        }
      },
      "RequestInteractionCreate": {
        "type": "object",
        "required": [
          "assignedUserId",
          "encounter"
        ],
        "properties": {
          "assignedUserId": {
            "type": "array",
            "items": {},
            "$ref": "#/components/schemas/UUID"
          },
          "encounter": {
            "type": "object",
            "$ref": "#/components/schemas/Encounter"
          },
          "patient": {
            "type": "object",
            "$ref": "#/components/schemas/Patient"
          }
        }
      },
      "RequestInteractionStreamConfig": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "config"
          },
          "configuration": {
            "type": "object",
            "$ref": "#/components/schemas/StreamConfig"
          }
        }
      },
      "RequestInteractionUpdate": {
        "type": "object",
        "properties": {
          "assignedUserId": {
            "type": "array",
            "items": {},
            "$ref": "#/components/schemas/UUID"
          },
          "encounter": {
            "type": "object",
            "$ref": "#/components/schemas/RequestEncounterUpdate"
          },
          "patient": {
            "type": "object",
            "$ref": "#/components/schemas/RequestPatientUpdate"
          }
        }
      },
      "RequestMention": {
        "type": "object",
        "required": [
          "query",
          "referenceTexts"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "The text-based query from the user."
          },
          "referenceTexts": {
            "type": "array",
            "description": "An array of reference texts where the mentions will be searched.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RequestParticipantCreate": {
        "type": "object",
        "required": [
          "channel",
          "role"
        ],
        "properties": {
          "channel": {
            "type": "integer"
          },
          "role": {
            "$ref": "#/components/schemas/V2ParticipantRoleEnum"
          }
        }
      },
      "RequestPatientUpdate": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "gender": {
            "$ref": "#/components/schemas/V2GenderEnum"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time"
          },
          "pronouns": {
            "type": "string"
          }
        }
      },
      "RequestQuery": {
        "type": "object",
        "required": [
          "query"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "The text-based query from the user.",
            "example": "What are the key points from the latest guidelines?"
          },
          "queryContext": {
            "type": "string",
            "description": "A specific document or focus context for the query.",
            "example": "doc123"
          },
          "focusContexts": {
            "type": "array",
            "description": "A list of additional focus contexts or documents.",
            "items": {
              "type": "string"
            },
            "example": [
              "doc456",
              "doc789"
            ]
          }
        }
      },
      "RequestQuestionPrompts": {
        "type": "object",
        "required": [
          "context"
        ],
        "properties": {
          "context": {
            "type": "array",
            "description": "The context in which the query is being made.",
            "items": {
              "type": "string"
            }
          },
          "query": {
            "type": "string",
            "description": "The query for which the questions are being generated (optional)."
          }
        }
      },
      "RequestStreamStatusEnum": {
        "type": "string",
        "enum": [
          "end",
          "pause",
          "resume"
        ]
      },
      "RequestTranscriptCreate": {
        "type": "object",
        "required": [
          "recordingId",
          "primaryLanguage",
          "participants"
        ],
        "properties": {
          "recordingId": {
            "type": "array",
            "items": {},
            "$ref": "#/components/schemas/UUID"
          },
          "primaryLanguage": {
            "type": "string"
          },
          "isDictation": {
            "type": "boolean"
          },
          "isMultichannel": {
            "type": "boolean"
          },
          "isDiarization": {
            "type": "boolean"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestParticipantCreate"
            }
          }
        }
      },
      "ResponseAlign": {
        "type": "object",
        "properties": {
          "alignmentPercentage": {
            "type": "number",
            "description": "Alignment percentage between the source and target documents."
          },
          "alignedSegments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "targetSegment": {
                  "type": "object",
                  "$ref": "#/components/schemas/TargetSegment"
                },
                "sourceReference": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "The content of the matching segment in the source document."
                      },
                      "range": {
                        "type": "array",
                        "description": "Start and end indices of the segment in the source document.",
                        "items": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "alignmentPercentage": {
                  "type": "number",
                  "description": "Alignment percentage between the target and source segment."
                }
              }
            }
          }
        }
      },
      "ResponseClassificationCreate": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "$ref": "#/components/schemas/ClassificationResult"
          }
        }
      },
      "ResponseCodesList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "system": {
                  "type": "string",
                  "example": "ICD-10"
                },
                "code": {
                  "type": "string",
                  "example": "T933"
                },
                "description": {
                  "type": "string"
                },
                "state": {
                  "type": "object",
                  "$ref": "#/components/schemas/CodesState"
                },
                "additionalCodes": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "subsetName": {
                        "type": "string",
                        "example": "orsakskoder"
                      },
                      "code": {
                        "type": "string",
                        "example": "W0231"
                      },
                      "description": {
                        "type": "string"
                      },
                      "state": {
                        "type": "object",
                        "$ref": "#/components/schemas/CodesState"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ResponseCodesRead": {
        "type": "object",
        "properties": {
          "system": {
            "type": "string",
            "example": "ICD-10"
          },
          "code": {
            "type": "string",
            "example": "T933"
          },
          "description": {
            "type": "string"
          },
          "state": {
            "type": "object",
            "$ref": "#/components/schemas/CodesState"
          },
          "additionalCodes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "subsetName": {
                  "type": "string",
                  "example": "orsakskoder"
                },
                "code": {
                  "type": "string",
                  "example": "W0231"
                },
                "description": {
                  "type": "string"
                },
                "state": {
                  "type": "object",
                  "$ref": "#/components/schemas/CodesState"
                }
              }
            }
          }
        }
      },
      "ResponseDocumentCreate": {
        "type": "object",
        "properties": {
          "isStream": {
            "type": "boolean"
          },
          "documentId": {
            "type": "array",
            "items": {},
            "$ref": "#/components/schemas/UUID"
          },
          "documentName": {
            "type": "string"
          },
          "templateId": {
            "type": "array",
            "items": {},
            "$ref": "#/components/schemas/UUID"
          },
          "sections": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "$ref": "#/components/schemas/V2DocumentSectionKeyEnum"
                },
                "text": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "ResponseDocumentList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseDocumentRead"
            }
          }
        }
      },
      "ResponseDocumentRead": {
        "type": "object",
        "properties": {
          "documentId": {
            "type": "array",
            "items": {},
            "$ref": "#/components/schemas/UUID"
          },
          "documentName": {
            "type": "string"
          },
          "templateId": {
            "type": "array",
            "items": {},
            "$ref": "#/components/schemas/UUID"
          },
          "isStream": {
            "type": "boolean"
          },
          "sections": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "$ref": "#/components/schemas/V2DocumentSectionKeyEnum"
                },
                "text": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "ResponseFact": {
        "type": "object",
        "properties": {
          "id": {
            "type": "array",
            "items": {},
            "$ref": "#/components/schemas/UUID"
          },
          "text": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "groupId": {
            "type": "array",
            "items": {},
            "$ref": "#/components/schemas/UUID"
          },
          "isDiscarded": {
            "type": "boolean"
          },
          "source": {
            "$ref": "#/components/schemas/V2SourceEnum"
          },
          "lastUpdated": {
            "type": "integer"
          },
          "evidence": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "reference": {
                  "type": "string"
                },
                "quote": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "ResponseFactCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "array",
            "items": {},
            "$ref": "#/components/schemas/UUID"
          },
          "text": {
            "type": "string"
          },
          "group": {
            "type": "string",
            "example": "Others"
          },
          "groupId": {
            "type": "array",
            "items": {},
            "$ref": "#/components/schemas/UUID"
          },
          "source": {
            "$ref": "#/components/schemas/V2SourceEnum"
          },
          "isDiscarded": {
            "type": "boolean"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAtTzOffset": {
            "type": "string",
            "example": "+00:00"
          }
        }
      },
      "ResponseFactEvidence": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "quote": {
            "type": "string"
          }
        }
      },
      "ResponseFactsCreate": {
        "type": "object",
        "properties": {
          "facts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "array",
                  "items": {},
                  "$ref": "#/components/schemas/UUID"
                },
                "text": {
                  "type": "string"
                },
                "group": {
                  "type": "string",
                  "example": "Others"
                },
                "groupId": {
                  "type": "array",
                  "items": {},
                  "$ref": "#/components/schemas/UUID"
                },
                "source": {
                  "$ref": "#/components/schemas/V2SourceEnum"
                },
                "isDiscarded": {
                  "type": "boolean"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "updatedAtTzOffset": {
                  "type": "string",
                  "example": "+00:00"
                }
              }
            }
          }
        }
      },
      "ResponseFactsList": {
        "type": "object",
        "properties": {
          "facts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "array",
                  "items": {},
                  "$ref": "#/components/schemas/UUID"
                },
                "text": {
                  "type": "string"
                },
                "group": {
                  "type": "string"
                },
                "groupId": {
                  "type": "array",
                  "items": {},
                  "$ref": "#/components/schemas/UUID"
                },
                "isDiscarded": {
                  "type": "boolean"
                },
                "source": {
                  "$ref": "#/components/schemas/V2SourceEnum"
                },
                "lastUpdated": {
                  "type": "integer"
                },
                "evidence": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      },
                      "reference": {
                        "type": "string"
                      },
                      "quote": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ResponseGuidelines": {
        "type": "object",
        "properties": {
          "summary": {
            "type": "string",
            "description": "A summary of the response."
          },
          "sources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuerySource"
            }
          }
        }
      },
      "ResponseInteraction": {
        "type": "object",
        "properties": {
          "assignedUserId": {
            "type": "array",
            "items": {},
            "$ref": "#/components/schemas/UUID"
          },
          "encounter": {
            "type": "object",
            "$ref": "#/components/schemas/Encounter"
          },
          "patient": {
            "type": "object",
            "$ref": "#/components/schemas/Patient"
          },
          "endedAt": {
            "type": "string",
            "format": "date-time"
          },
          "endedAtTzoffset": {
            "type": "string",
            "example": "+00:00"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdAtTzoffset": {
            "type": "string",
            "example": "+00:00"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAtTzoffset": {
            "type": "string",
            "example": "+00:00"
          },
          "websocketUrl": {
            "type": "string"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ResponseInteractionCreate": {
        "type": "object",
        "properties": {
          "interactionId": {
            "type": "array",
            "items": {},
            "$ref": "#/components/schemas/UUID"
          },
          "websocketUrl": {
            "type": "string"
          }
        }
      },
      "ResponseInteractions": {
        "type": "object",
        "properties": {
          "interactions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "assignedUserId": {
                  "type": "array",
                  "items": {},
                  "$ref": "#/components/schemas/UUID"
                },
                "encounter": {
                  "type": "object",
                  "$ref": "#/components/schemas/Encounter"
                },
                "patient": {
                  "type": "object",
                  "$ref": "#/components/schemas/Patient"
                },
                "endedAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "endedAtTzoffset": {
                  "type": "string",
                  "example": "+00:00"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "createdAtTzoffset": {
                  "type": "string",
                  "example": "+00:00"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "updatedAtTzoffset": {
                  "type": "string",
                  "example": "+00:00"
                },
                "websocketUrl": {
                  "type": "string"
                },
                "lastUpdated": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        }
      },
      "ResponseMention": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "string",
            "description": "The type of mention (e.g., transcript, document)."
          },
          "range": {
            "type": "array",
            "description": "Character range for document type.",
            "items": {
              "type": "integer"
            }
          },
          "time": {
            "type": "array",
            "description": "Time range in seconds for transcript type.",
            "items": {
              "type": "integer"
            }
          },
          "snippet": {
            "type": "string",
            "description": "Text snippet for the mention."
          },
          "documentId": {
            "type": "array",
            "description": "The document ID if applicable.",
            "items": {},
            "$ref": "#/components/schemas/UUID"
          },
          "utteranceId": {
            "type": "array",
            "description": "The utterance ID if applicable.",
            "items": {},
            "$ref": "#/components/schemas/UUID"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp for transcript mentions."
          }
        }
      },
      "ResponseQuery": {
        "type": "object",
        "properties": {
          "tool": {
            "type": "string",
            "description": "The tool providing the response (e.g., guidelines, mentions, general_chat, etc.)"
          },
          "data": {
            "type": "object",
            "description": "The response data specific to the tool.",
            "$ref": "#/components/schemas/QueryData"
          }
        }
      },
      "ResponseQuestionPrompts": {
        "type": "object",
        "properties": {
          "prompts": {
            "type": "array",
            "description": "An array of suggested questions.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResponseRecordingCreate": {
        "type": "object",
        "properties": {
          "recordingId": {
            "type": "array",
            "items": {},
            "$ref": "#/components/schemas/UUID"
          }
        }
      },
      "ResponseRecordingList": {
        "type": "object",
        "properties": {
          "recordings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        }
      },
      "ResponseStreamTypeEnum": {
        "type": "string",
        "enum": [
          "transcript",
          "fact",
          "topic"
        ]
      },
      "ResponseTranscriptCreate": {
        "type": "object",
        "properties": {
          "transcriptId": {
            "type": "array",
            "items": {},
            "$ref": "#/components/schemas/UUID"
          },
          "transcript": {
            "type": "object",
            "$ref": "#/components/schemas/Transcript"
          }
        }
      },
      "SourceReference": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "The content of the matching segment in the source document."
          },
          "range": {
            "type": "array",
            "description": "Start and end indices of the segment in the source document.",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "StreamConfig": {
        "type": "object",
        "properties": {
          "specialtyId": {
            "type": "string"
          },
          "outputLocale": {
            "type": "string"
          },
          "transcription": {
            "type": "object",
            "$ref": "#/components/schemas/StreamTranscript"
          }
        }
      },
      "StreamTranscript": {
        "type": "object",
        "properties": {
          "primaryLanguage": {
            "type": "string"
          },
          "isDictation": {
            "type": "boolean"
          },
          "isMultichannel": {
            "type": "boolean"
          },
          "participants": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "channel",
                "role"
              ],
              "properties": {
                "channel": {
                  "type": "integer"
                },
                "role": {
                  "$ref": "#/components/schemas/V2ParticipantRoleEnum"
                }
              }
            }
          },
          "isDiarization": {
            "type": "boolean"
          }
        }
      },
      "TargetSegment": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "The content of the target document segment."
          },
          "range": {
            "type": "array",
            "description": "Start and end indices of the segment in the target document.",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "Transcript": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          }
        }
      },
      "UUID": {
        "type": "string",
        "items": {},
        "format": "uuid"
      },
      "V2DocumentContext": {
        "type": "string"
      },
      "V2DocumentContextEnum": {
        "type": "string",
        "enum": [
          "fact",
          "transcript",
          "string"
        ]
      },
      "V2DocumentSectionKey": {
        "type": "string"
      },
      "V2DocumentSectionKeyEnum": {
        "type": "string",
        "enum": [
          "medical_history",
          "observations"
        ]
      },
      "V2EncounterStatus": {
        "type": "string"
      },
      "V2EncounterStatusEnum": {
        "type": "string",
        "enum": [
          "planned",
          "in-progress",
          "on-hold",
          "completed",
          "cancelled",
          "deleted"
        ]
      },
      "V2EncounterType": {
        "type": "string"
      },
      "V2EncounterTypeEnum": {
        "type": "string",
        "enum": [
          "first_consultation",
          "consultation",
          "emergency",
          "inpatient",
          "outpatient"
        ]
      },
      "V2Gender": {
        "type": "string"
      },
      "V2GenderEnum": {
        "type": "string",
        "enum": [
          "male",
          "female",
          "unknown",
          "other"
        ]
      },
      "V2ParticipantRole": {
        "type": "string"
      },
      "V2ParticipantRoleEnum": {
        "type": "string",
        "enum": [
          "doctor",
          "patient"
        ]
      },
      "V2Source": {
        "type": "string"
      },
      "V2SourceEnum": {
        "type": "string",
        "enum": [
          "core",
          "system",
          "user"
        ]
      },
      "code.ResponseCodesList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "system": {
                  "type": "string",
                  "example": "ICD-10"
                },
                "code": {
                  "type": "string",
                  "example": "T933"
                },
                "description": {
                  "type": "string"
                },
                "state": {
                  "type": "object",
                  "$ref": "#/components/schemas/CodesState"
                },
                "additionalCodes": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "subsetName": {
                        "type": "string",
                        "example": "orsakskoder"
                      },
                      "code": {
                        "type": "string",
                        "example": "W0231"
                      },
                      "description": {
                        "type": "string"
                      },
                      "state": {
                        "type": "object",
                        "$ref": "#/components/schemas/CodesState"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "cortiDb.V2EncounterStatus": {
        "type": "string"
      },
      "cortiDb.V2EncounterType": {
        "type": "string"
      },
      "cortiDb.V2Gender": {
        "type": "string"
      },
      "cortiDb.V2Source": {
        "type": "string"
      },
      "cortiFact.ResponseFactCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "array",
            "items": {},
            "$ref": "#/components/schemas/UUID"
          },
          "text": {
            "type": "string"
          },
          "group": {
            "type": "string",
            "example": "Others"
          },
          "groupId": {
            "type": "array",
            "items": {},
            "$ref": "#/components/schemas/UUID"
          },
          "source": {
            "$ref": "#/components/schemas/V2SourceEnum"
          },
          "isDiscarded": {
            "type": "boolean"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAtTzOffset": {
            "type": "string",
            "example": "+00:00"
          }
        }
      },
      "cortiFact.ResponseFactsList": {
        "type": "object",
        "properties": {
          "facts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "array",
                  "items": {},
                  "$ref": "#/components/schemas/UUID"
                },
                "text": {
                  "type": "string"
                },
                "group": {
                  "type": "string"
                },
                "groupId": {
                  "type": "array",
                  "items": {},
                  "$ref": "#/components/schemas/UUID"
                },
                "isDiscarded": {
                  "type": "boolean"
                },
                "source": {
                  "$ref": "#/components/schemas/V2SourceEnum"
                },
                "lastUpdated": {
                  "type": "integer"
                },
                "evidence": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      },
                      "reference": {
                        "type": "string"
                      },
                      "quote": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "transcription.ResponseTranscriptCreate": {
        "type": "object",
        "properties": {
          "transcriptId": {
            "type": "array",
            "items": {},
            "$ref": "#/components/schemas/UUID"
          },
          "transcript": {
            "type": "object",
            "$ref": "#/components/schemas/Transcript"
          }
        }
      },
      "uuid.UUID": {
        "type": "string",
        "items": {},
        "format": "uuid"
      },
      "ResponseTranscriptTime": {
        "type": "object",
        "properties": {
          "start": {
            "type": "number"
          },
          "end": {
            "type": "number"
          }
        }
      },
      "ResponseTranscript": {
        "type": "object",
        "properties": {
          "id": {
            "type": "array",
            "items": {},
            "$ref": "#/components/schemas/UUID"
          },
          "start": {
            "type": "number"
          },
          "duration": {
            "type": "number"
          },
          "transcript": {
            "type": "string"
          },
          "isFinal": {
            "type": "boolean"
          },
          "participant": {
            "type": "object",
            "$ref": "#/components/schemas/RequestParticipantCreate"
          },
          "time": {
            "type": "object",
            "$ref": "#/components/schemas/ResponseTranscriptTime"
          }
        }
      },
      "RequestInteractionStreamStatus": {
        "type": "string",
        "enum": [
          "end",
          "pause",
          "resume"
        ]
      },
      "ResponseInteractionStreamTranscript": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ResponseStreamTypeEnum"
          },
          "data": {
            "$ref": "#/components/schemas/ResponseTranscript"
          }
        }
      },
      "ResponseInteractionStreamFact": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ResponseStreamTypeEnum"
          },
          "data": {
            "$ref": "#/components/schemas/ResponseFact"
          }
        }
      },
      "ResponseInteractionStreamTopic": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ResponseStreamTypeEnum"
          },
          "data": {
            "type": "string"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "interactions"
    },
    {
      "name": "stream"
    },
    {
      "name": "facts"
    },
    {
      "name": "documents"
    },
    {
      "name": "codes"
    },
    {
      "name": "recordings"
    },
    {
      "name": "transcripts"
    }
  ]
}